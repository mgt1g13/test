import libraries.cleanup;
import libraries.ref_statemachines2context;
import libraries.ref_statemachines2variables;
import libraries.ref_statemachines2invariants;
import libraries.ref_statemachines2init;
import libraries.ref_statemachines2events;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

transformation statemachines2eventb(inout inoutMachine:eventb, inout inoutContext:eventb, in inStatemachine:statemachines);

main() {
	setupMachineContext(inoutMachine.rootObjects()![eventb::machine::Machine], inoutContext.rootObjects()![eventb::context::Context]);
	inoutContext.rootObjects()[eventb::context::Context]->map iumlb2eventbContext(inStatemachine.rootObjects()![statemachines::Statemachine]);
	inoutMachine.rootObjects()[eventb::machine::Machine]->map iumlb2eventbMachine(inStatemachine.rootObjects()![statemachines::Statemachine]);
}

/*
 * Transforms iumlb to eventb context.
 */
mapping inout eventb::context::Context::iumlb2eventbContext(in statemachine : statemachines::Statemachine) {
	var generatorID : String := statemachine.extensionId;
	self.map context2nonGeneratedContext(generatorID);
	constants := statemachine.map statemachine2constants(generatorID)->
		union(constants->asSequence());
	sets := statemachine.map statemachine2sets(generatorID)->
		union(sets->asSequence());
	axioms := statemachine.map statemachine2typeAxioms(generatorID)->
		union(statemachine.map statemachine2nonEmptyAxioms(generatorID))->
		union(statemachine.map statemachine2partitionAxioms(generatorID))->
		union(axioms->asSequence());
}

/*
 * Transforms iumlb to eventb machine.
 */
mapping inout eventb::machine::Machine::iumlb2eventbMachine(in statemachine : statemachines::Statemachine) {
	var generatorID : String := statemachine.extensionId;
	self.map machine2nonGeneratedMachine(generatorID);	  
	variables := statemachine.map statemachine2variables(generatorID,self.getRefinmentLevel())->
		union(variables->asSequence());
	invariants := statemachine.map statemachine2typeInvariants(generatorID,self.getRefinmentLevel(),self)->
		union(statemachine.map statemachine2superstateInvariants(generatorID,self))->
		union(statemachine.map statemachine2constraintInvariants(generatorID))->
		union(invariants->asSequence());
	statemachine.map rootStatemachine2initActions(generatorID,self.getRefinmentLevel());
	// inactive state actions generated after active to not conflict with latter
	//events[name = INIT].map initEvent2initEventInactiveStates(statemachine, generatorID);
	statemachine.map rootStatemachine2events(generatorID,self.getRefinmentLevel());
}

/*
 * Sets sees property of machine to context;
 * ssets extends property of implicit context to an abstract implicit context.
 * Assumes context is an implicit context.
 */
helper setupMachineContext(inout machine : eventb::machine::Machine, inout context : eventb::context::Context) {
	// make a machine see a context
	if machine.seesNames->excludes(context.name)
	then machine.seesNames += context.name
	endif;
	
	// make an implicit context extend am abstract implicit context
	// if abstract machine sees implicit context and if current context doesn't extend it yet
	if machine._refines <> null and machine._refines.seesNames->includes(getImplicitContextName(machine.refinesNames->first()))
	then
		if context.extendsNames->excludes(getImplicitContextName(machine.refinesNames->first()))
		then context.extendsNames += getImplicitContextName(machine.refinesNames->first())
		endif
	endif;
}