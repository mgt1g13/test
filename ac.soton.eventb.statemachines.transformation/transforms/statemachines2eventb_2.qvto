import libraries.cleanup;
import libraries.statemachines2variables;
import libraries.statemachines2invariants;
import libraries.statemachines2init;
import libraries.statemachines2events;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

transformation statemachines2eventb(inout inoutModel:eventb, in inStatemachine:statemachines);

main() {
	inoutModel.rootObjects()[eventb::machine::Machine]->map iumlb2eventb(inStatemachine.rootObjects()![statemachines::AbstractStatemachine]);
}

/*
 * Transforms iumlb to eventb.
 */
mapping inout eventb::machine::Machine::iumlb2eventb(in rootAbstractStatemachine : statemachines::AbstractStatemachine) {
	var generatorID : String := rootAbstractStatemachine.getExtensionID();
	self.map machine2nonGeneratedMachine(generatorID);
	
	variables := rootAbstractStatemachine.map abstractStatemachine2variables(generatorID)->
		union(variables->asSequence());
	invariants := rootAbstractStatemachine.map abstractStatemachine2typeInvariants(generatorID)->
		union(rootAbstractStatemachine.map rootAbstractStatemachine2partitionInvariants(generatorID))->
		union(rootAbstractStatemachine.map abstractStatemachine2substateInvariants(generatorID))->
		union(rootAbstractStatemachine.map abstractStatemachine2constraintInvariants(generatorID))->
		union(invariants->asSequence());
	rootAbstractStatemachine.map rootAbstractStatemachine2initActions(generatorID);
	rootAbstractStatemachine.map rootAbstractStatemachine2events(generatorID);
}
