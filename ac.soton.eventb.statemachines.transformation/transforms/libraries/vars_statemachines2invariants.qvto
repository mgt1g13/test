import util;

modeltype eventb uses core('http://emf.eventb.org/models/core/2014');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/2014');

library statemachines2invariants;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Type invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to type invariants.
 */
mapping statemachines::Statemachine::statemachine2typeInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.nodes[statemachines::State].map state2typeInvariants(generatorID);
	}
}

/*
 * Transforms state to type invariants.
 */
mapping statemachines::State::state2typeInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.map state2typeInvariant(generatorID)->asSequence()->
			union(self.statemachines.map statemachine2typeInvariants(generatorID)->flatten());
	}
}

/*
 * Transforms state to type invariant.
 * Creates invariant only for non-refined state.
 */
mapping statemachines::State::state2typeInvariant(in generatorID : String) : eventb::machine::Invariant 
	when { self._refines = null }
{
	name := TYPEOF_ + self.name;
	predicate := 
		if self.getRootStatemachine().instances = null then 
			self.name + B_IN + B_BOOL
		else
			if self.getStatemachine().isRootStatemachine() then
				self.name + B_SUBSETEQ +  self.getRootStatemachine().instances.name
			else 
				self.name + B_SUBSETEQ +  self.getStatemachine().getSuperState().name			
			endif
		endif;	
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Partition invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms root statemachine to partition invariants.
 */
mapping statemachines::Statemachine::rootStatemachine2partitionInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		String.startStrCounter(index);
		result := self.map rootStatemachine2partitionInvariant(generatorID)->asSequence()->
			union(self.nodes[statemachines::State].map state2partitionInvariants(self.name, generatorID)->flatten());
	}
	end {
		index.restartAllStrCounter();
	}
}

/*
 * Transforms root statemachine to partition invariant.
 * Creates partition invariant only for non-refined statemachine 
 * and only if it has more than one state.
 */
mapping statemachines::Statemachine::rootStatemachine2partitionInvariant(in generatorID : String) : eventb::machine::Invariant
	when { self._refines = null and self.nodes[statemachines::State]->size() > 1 }
{
	name := DISTINCT_STATES_IN_ + self.name +"_"+ String.incrStrCounter(index).toString();
	predicate := self.getStatePartitionAnticedent4RootSM() + "partition" + self.getStatePartitionContent();
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

/*
 * Transforms state to partition invariants.
 */
mapping statemachines::State::state2partitionInvariants(in prefix : String, in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.statemachines.map statemachine2partitionInvariants(self, prefix+"_"+self.name, generatorID);
	}
}

/*
 * Transforms abstract statemachine to partition invariants.
 */
mapping statemachines::Statemachine::statemachine2partitionInvariants(in parentState : statemachines::State, in prefix : String, in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.map statemachine2partitionInvariant(parentState, prefix+"_"+self.name, generatorID)->asSequence()->
			union(self.nodes[statemachines::State].map state2partitionInvariants(prefix, generatorID)->flatten());
	}
}

/*
 * Transforms statemachine to partition invariant.
 * Only constructs an invariant if there is more than one state in a statemachine
 * and statemachine is non-refined.
 */
mapping statemachines::Statemachine::statemachine2partitionInvariant(in parentState : statemachines::State, in prefix : String, in generatorID : String) : eventb::machine::Invariant
	when { self._refines = null and self.nodes[statemachines::State]->size() > 1 }
{
	name := DISTINCT_STATES_IN_ + prefix +"_"+ String.incrStrCounter(index).toString();
	predicate := self.getStatePartitionAnticedent4NestedSM(parentState) + "partition" + self.getStatePartitionContent();
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Substate invariants - THESE ARE NOT NEEDED FOR LIFTED SM SINCE IT IS INCLUDED IN THE TYPE OF SUBSTATES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to substate invariants.
 * THESE ARE NOT NEEDED FOR LIFTED SM SINCE IT IS INCLUDED IN THE TYPE OF SUBSTATES
 */
mapping statemachines::Statemachine::statemachine2substateInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant){
	init {
			result := 
				if 	self.getRootStatemachine().instances = null then
					self.nodes[statemachines::State].map state2substateInvariants(generatorID)
				else
					{} //empty()
				endif;
	}
}

/*
 * Transforms state to its substates invaraints.
 */
mapping statemachines::State::state2substateInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.statemachines.nodes[statemachines::State].map state2substateInvariant(self, generatorID)->
			union(self.statemachines.map statemachine2substateInvariants(generatorID)->flatten());
	}
}

/*
 * Transforms state to substate invariant on parent state.
 * Creates substate invariant for only non-refined state.
 */
mapping statemachines::State::state2substateInvariant(in parentState : statemachines::State, in generatorID : String) : eventb::machine::Invariant 
	when { self._refines = null }
{
	name := self.name + _SUBSTATEOF_ + parentState.name;
	predicate := (self.name + B_EQ + B_TRUE).parenthesize() + B_IMPL + (parentState.name + B_EQ + B_TRUE).parenthesize();
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constraint invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to constraint invariants.
 */
mapping statemachines::Statemachine::statemachine2constraintInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.nodes[statemachines::State].map state2constraintInvariants(generatorID);
	}
}

/*
 * Transforms state to constraint invariants.
 */
mapping statemachines::State::state2constraintInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.map state2constraintInvariantsFinal(generatorID)->asSequence()->
			union(self.statemachines.map statemachine2constraintInvariants(generatorID)->flatten());
	}
}

/*
 * Transforms state to constraint invariants.
 */
mapping statemachines::State::state2constraintInvariantsFinal(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.invariants->collect(i | object eventb::machine::Invariant {
			name := i.name;
			theorem := i.theorem;
			predicate :=
				if self.getRootStatemachine().instances = null then
					(self.name + B_EQ + B_TRUE).parenthesize() + B_IMPL + i.predicate.parenthesize()
				else
					B_FORALL+self.getRootStatemachine().selfName+B_MIDDOT+
					(self.getRootStatemachine().selfName+B_IN+self.name).parenthesize() + B_IMPL + i.predicate.parenthesize()
				endif;
			generated := true;
			attributes += getGeneratedAttr(generatorID);
		});
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// helpers specific to this module
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Returns an anticedent for the partition invariant for an unlifted root statemachine with final state.
 * or empty string otherwise
 */
helper statemachines::Statemachine::getStatePartitionAnticedent4RootSM() : String {
	return 
	if self.hasFinalState() and self.getRootStatemachine().instances = null then 
		B_TRUE + B_IN + self.getStateNames()->toString(B_COM).asSet() + B_IMPL
	else ""
	endif;
}

/*
 * Returns an anticedent for the partition invariant for an unlifted nested statemachine
 * or empty string otherwise 
 */
helper statemachines::Statemachine::getStatePartitionAnticedent4NestedSM(in parentState : statemachines::State) : String {
	return 
		if self.getRootStatemachine().instances = null then 
			(parentState.name + B_EQ + B_TRUE).parenthesize() + B_IMPL
		else
			""
		endif
}


/*
* Returns the partition content (the bit in brackets and including the brackets)
* taking into account whether the statemachine is lifted or not and if not
* whether this is a root statemachine and if so does it have a final state
*/
helper statemachines::Statemachine::getStatePartitionContent() : String {
	return
	if self.getRootStatemachine().instances = null then 
		(B_TRUE.asSet() + B_COM + self.getStatesString4Partition()->toString(B_COM)).parenthesize()
	else
		if self.isRootStatemachine() then 
			if self.hasFinalState() then
				((self.getStateNames()->toString(B_UNION)).parenthesize() + B_COM + self.getStateNames()->toString(B_COM)).parenthesize()
			else
				(self.instances.name + B_COM + self.getStateNames()->toString(B_COM)).parenthesize()
			endif
		else
			(self.getSuperState().name + B_COM + self.getStateNames()->toString(B_COM)).parenthesize()
		endif
	endif	
}

/*
 * Returns the part of the partition string constructed from the state variables of a statemachine.
 * ONLY FOR NON-LIFTED
 */
helper statemachines::Statemachine::getStatesString4Partition() : Sequence(String) {
	return self.nodes[statemachines::State].map getStateString4Partition();
}

/*
 * Returns a string for a single state variable suitable for the partition invariant.
 * ONLY FOR NON-LIFTED - this is an intersection of the singleton state with TRUE
 */
helper statemachines::State::getStateString4Partition() : String {
	return self.name.asSet() + B_INTER + B_TRUE.asSet()
}
