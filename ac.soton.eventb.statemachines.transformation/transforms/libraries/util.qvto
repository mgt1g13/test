import literals;

modeltype eventb uses core('http://emf.eventb.org/models/core/2014');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/1013');

library util;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Query and helper rules
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Returns if eventB element has a generator attribute with the given ID.
 * (This used to also check that the elements generated attribute was set but this can sometimes be lost e.g. it is not preserved by the machine refiner)
 */
query eventb::EventBElement::isGenerated(in generatorID : String) : Boolean {
	return self.attributes->exists(key = GENERATOR_ID_KEY)
		and self.attributes![key = GENERATOR_ID_KEY].value.value = generatorID;
}

/*
 * Returns 'generated' attribute.
 */
helper getGeneratedAttr(in generatorID : String) : StringToAttributeMapEntry {
	return object StringToAttributeMapEntry {
		key := GENERATOR_ID_KEY;
		value := object Attribute {
			type := AttributeType::String;
			value := generatorID;
		}
	}
}


/*
 * Returns original string surrounded by curly brackets.
 */
helper String::asSet() : String {
	return B_LBRC + self + B_RBRC;
}

/*
 * Returns original string surrounded by parentheses.
 */
helper String::parenthesize() : String {
	return B_LPAR + self + B_RPAR;
}

/*
 * Returns string representation of a sequence of strings, separated by separator.
 */
helper Sequence(String)::toString(in separator : String) : String {
	var string : String := '';
	var n : Integer := 1;
	var size : Integer := self->size();
	while (n <= size) {
		string := string + self->at(n);
		n := n + 1;
		if n <= size then string := string + separator endif;
	};
	return string;
}

/*
 * Returns all abstract nodes that are superstates of input node.
 * Result includes input node itself.
 */
helper statemachines::AbstractNode::getSuperstates() : Set(statemachines::AbstractNode) {
	return if self.eContainer().eContainer().oclIsKindOf(statemachines::State)
		then self.eContainer().eContainer().oclAsType(statemachines::State).getSuperstates()->union(self->asSet())
		else self->asSet()
		endif;
}

/*
 * Returns true if transition is local to source state i.e.
 * source state is abstract state and target state is its substate.
 */
query statemachines::Transition::isSelfLoop() : Boolean {
	return self.source = self.target;
	//self.source.oclIsKindOf(statemachines::State) and self.source.oclAsType(statemachines::State).statemachines->exists(contains(self.target)));
}

/*
 * Returns true if transition is local to source state i.e.
 * source state is state and target state is its substate.
 */
query statemachines::Transition::isLocalToSource() : Boolean {
	return (self.source.oclIsKindOf(statemachines::State) and self.source.oclAsType(statemachines::State).statemachines->exists(contains(self.target)));
}

/*
 * Returns true if transition is local to target state i.e.
 * target state is abstract state and source state is its substate.
 */
query statemachines::Transition::isLocalToTarget() : Boolean {
	return (self.target.oclIsKindOf(statemachines::State) and self.target.oclAsType(statemachines::State).statemachines->exists(contains(self.source)));
}

/*
 * Returns true if transition is local i.e. local to source state or local to target state.
 */
query statemachines::Transition::isLocal() : Boolean {
	return self.isLocalToSource() or self.isLocalToTarget();
}

/*
 * Returns true if statemachine contains a node amongst its states or substates.
 */
query statemachines::Statemachine::hasExit(in transition : statemachines::Transition) : Boolean {
	return self.nodes->includes(transition.target) and transition.target.oclIsTypeOf(statemachines::Final);
}

/*
 * Returns true if statemachine contains a node amongst its states or substates.
 */
query statemachines::Statemachine::contains(in node : statemachines::AbstractNode) : Boolean {
	return self.nodes->includes(node) or self.nodes[statemachines::State].statemachines->exists(contains(node));
}

/*
 * Returns starting state found in statemachine i.e. state that is linked by incoming transition from 'Initial' state.
 */
helper statemachines::Statemachine::getStartingState() : statemachines::State {
	return if not self.nodes[statemachines::Initial]->isEmpty()
		then self.nodes![statemachines::Initial].outgoing->first().target.oclAsType(statemachines::State)
		else null
		endif;
}

/*
 * Returns all states that are superstates of input state up to container statemachine.
 */
helper statemachines::State::getSuperstatesTo(in container : statemachines::Statemachine) : Set(statemachines::State) {
	return if self.eContainer() = container
		then self->asSet()
		else if self.eContainer().eContainer().oclIsKindOf(statemachines::State)
			then self.eContainer().eContainer().oclAsType(statemachines::State).getSuperstatesTo(container)->union(self->asSet())
			else self->asSet()
			endif
		endif;
}

/*
 * Returns true if event and its extensions contain a guard of specified label.
 */
query eventb::machine::Event::containsGuard(in label : String) : Boolean {
	return self.guards->exists(name = label) or
		(self.extended and self._refines->first().containsGuard(label));
}

/*
 * Returns true if event and its extensions contain an action of specified label.
 */
query eventb::machine::Event::containsAction(in label : String) : Boolean {
	return self.actions->exists(name = label) or
		(self.extended and self._refines->first().containsAction(label));
}



/*
 * Returns true if machine contains an invariant of specified label
 */
query eventb::machine::Machine::containsGeneratedInvariant(in label : String, in generatorID : String) : Boolean {
	return self.invariants->exists(name = label and isGenerated(generatorID))  or
		(self.extensions!=null and self._refines->first().containsGeneratedInvariant(label,generatorID));
}

query eventb::machine::Machine::containsGeneratedInvariantWithSuffix(in labelSuffix : String, in generatorID : String) : Boolean {
	return self.invariants->exists(name.endsWith(labelSuffix) and isGenerated(generatorID)) or
		(self.extensions!=null and self._refines->first().containsGeneratedInvariantWithSuffix(labelSuffix,generatorID));
}

/*
 * Returns true if statemachine contains nested state, which is target for event (transition's elaborated).
 */
helper statemachines::Statemachine::containsEventTarget(in event : eventb::machine::Event) : Boolean {
	return self.nodes[statemachines::State].incoming->exists(elaborates->includes(event))
		or self.nodes[statemachines::State].statemachines->exists(containsEventTarget(event));
}

/*
 * Returns true if statemachine contains nested state, which is source for event (transition's elaborated).
 */
helper statemachines::Statemachine::containsEventSource(in event : eventb::machine::Event) : Boolean {
	return self.nodes[statemachines::State].outgoing->exists(elaborates->includes(event))
		or self.nodes[statemachines::State].statemachines->exists(containsEventSource(event));
}

/*
 * Returns state's statemachine.
 */
helper statemachines::AbstractNode::getStatemachine() : statemachines::Statemachine {
	return self.eContainer().oclAsType(statemachines::Statemachine);
}

/*
 * Returns state's root level statemachine.
 */
helper statemachines::AbstractNode::getRootStatemachine() : statemachines::Statemachine {
	return 
		if self.eContainer().eContainer().oclIsKindOf(statemachines::State)
		then self.eContainer().eContainer().oclAsType(statemachines::State).getRootStatemachine()
		else self.eContainer().oclAsType(statemachines::Statemachine)
		endif;
}

/*
 * Returns statemachines's root level statemachine.
 */
helper statemachines::Statemachine::getRootStatemachine() : statemachines::Statemachine {
	return 
		if self.isRootStatemachine()
		then self
		else self.getSuperState().getRootStatemachine()
		endif;
}

/*
 * Returns true if statemachine is root level statemachine.
 */
query statemachines::Statemachine::isRootStatemachine() : Boolean {
	return not self.eContainer().oclIsKindOf(statemachines::State);
}

/*
 * Returns statemachine's superstate
 */
helper statemachines::Statemachine::getSuperState() : statemachines::State{
	return self.eContainer().oclAsType(statemachines::State);
}


/*
 * Returns true if statemachine has a parent state.
 */
query statemachines::Statemachine::hasParentState() : Boolean {
	return self.eContainer().oclIsTypeOf(statemachines::State);
}

/*
 * Returns true if statemachine has a final state.
 */
query statemachines::Statemachine::hasFinalState() : Boolean {
	return self.nodes[statemachines::Final]->notEmpty();
}

/*
 * Returns a sequence of names of the states in a statemachine, each name in curly braces to form a singleton set
 */
helper statemachines::Statemachine::getStateNamesAsSingletons() : Sequence(String) {
	return self.nodes[statemachines::State].name.asSet();
}

/*
 * Returns a sequence of names of the states in a statemachine.
 */
helper statemachines::Statemachine::getStateNames() : Sequence(String) {
	return self.nodes[statemachines::State].name;
}

/*
 * Returns the current refinement level
 */
helper eventb::machine::Machine::getRefinmentLevel(): Integer{
    var i : Integer := 0;
    var SM : eventb::machine::Machine := self;
	while(SM._refines != null){
		i := i + 1 ;
		SM := SM._refines->first();
	};
	return i-1;
}

/*
 * Returns implicit context name from machine name.
 */
helper getImplicitContextName(in machineName : String) : String {
	return machineName + _IMPLICIT_CONTEXT;
}

/*
 * Returns true if event and its extensions contain an action of specified label prefix.
 */
query eventb::machine::Event::containsActionWithPrefix(in labelPrefix : String) : Boolean {
	return self.actions->exists(name.startsWith(labelPrefix)) or
		(self.extended and self._refines->first().containsActionWithPrefix(labelPrefix));
}

/*
 * Returns true if event and its extensions contain an guard of specified label prefix.
 */
query eventb::machine::Event::containsGuardWithPrefix(in labelPrefix : String) : Boolean {
	return self.guards->exists(name.startsWith(labelPrefix)) or
		(self.extended and self._refines->first().containsGuardWithPrefix(labelPrefix));
}

/*
 * Returns true if event and its extensions contain an guard of specified label suffix.
 */
query eventb::machine::Event::containsGuardWithSuffix(in labelSuffix : String) : Boolean {
	return self.guards->exists(name.endsWith(labelSuffix)) or
		(self.extended and self._refines->first().containsGuardWithSuffix(labelSuffix));
}

/*
 * Returns true if event and its extensions contain an parameter of specified label.
 */
query eventb::machine::Event::containsParameterWithName(in label : String) : Boolean {
	return self.parameters->exists(name = label) or
		(self.extended and self._refines->first().containsParameterWithName(label));
}