
modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

library util;

// index string used for counter
property index : String = "index";

// generator id key
property GENERATOR_ID_KEY : String = "org.eventb.emf.persistence.generator_ID";

// initialisation event name
property INIT : String = "INITIALISATION";

property B_EQ : String = " = ";
property B_BEQ : String = " ≔ ";
property B_IN : String = " ∈ ";
property B_BOOL : String = "BOOL";
property B_TRUE : String = "TRUE";
property B_FALSE : String = "FALSE";
property B_NOT : String = " ¬ ";
property B_AND : String = " ∧ ";
property B_OR : String = " ∨ ";
property B_LPAR : String = "(";
property B_RPAR : String = ")";
property B_LBRC : String = "{";
property B_RBRC : String = "}";
property B_COM : String = ", ";
property B_IMPL : String = " ⇒ ";
property B_UNION : String = " ∩ ";

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Query and helper rules
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Returns if eventB element is generated or not.
 */
query eventb::EventBElement::isGenerated(in generatorID : String) : Boolean {
	return self.generated = true
		and self.attributes->exists(key = GENERATOR_ID_KEY)
		and self.attributes![key = GENERATOR_ID_KEY].value.value = generatorID;
}

/*
 * Returns 'generated' attribute.
 */
helper getGeneratedAttr(in generatorID : String) : StringToAttributeMapEntry {
	return object StringToAttributeMapEntry {
		key := GENERATOR_ID_KEY;
		value := object Attribute {
			type := AttributeType::String;
			value := generatorID;
		}
	}
}

/*
 * Returns the name of an abstract state.
 */
helper statemachines::AbstractState::getName() : String {
	return if (self.oclIsTypeOf(statemachines::State)) 
	then self.oclAsType(statemachines::State).name 
	else self.oclAsType(statemachines::RefinedState).label endif;
}

/*
 * Returns a sequence of partition strings for state variables of a statemachine.
 */
helper statemachines::Statemachine::getStatePartitions() : Sequence(String) {
	return self.nodes[statemachines::State].map getPartition();
}

/*
 * Returns partiotion string for a state variable.
 */
helper statemachines::State::getPartition() : String {
	return self.name.asSet() + B_UNION + B_TRUE.asSet();
}

/*
 * Returns original string surrounded by curly brackets.
 */
helper String::asSet() : String {
	return B_LBRC + self + B_RBRC;
}

/*
 * Returns original string surrounded by parentheses.
 */
helper String::parenthesize() : String {
	return B_LPAR + self + B_RPAR;
}

/*
 * Returns string representation of a sequence of strings, separated by separator.
 */
helper Sequence(String)::toString(in separator : String) : String {
	var string : String := '';
	var n : Integer := 1;
	var size : Integer := self->size();
	while (n <= size) {
		string := string + self->at(n);
		n := n + 1;
		if n <= size then string := string + separator endif;
	};
	return string;
}

/*
 * Externalises abstract node to abstract state.
 * Returns 
 * - itself, if already an abstract state
 * - superstate, which is abstract state, if ANY state
 * - otherwise null.
 * This helper is required for local transitions (that use ANY state as source/target) to convert them to external for subsequent transformation.
 */
helper statemachines::AbstractNode::externalise() : statemachines::AbstractState {
	return if self.oclIsTypeOf(statemachines::ANY)
		then if self.eContainer().eContainer().oclIsKindOf(statemachines::AbstractState)
			then self.eContainer().eContainer().oclAsType(statemachines::AbstractState)
			endif
		else if self.oclIsKindOf(statemachines::AbstractState)
			then self.oclAsType(statemachines::AbstractState)
			else null
			endif
		endif;
}

/*
 * Returns all abstract states that are superstates of input state.
 * Result includes input state itself.
 */
helper statemachines::AbstractState::getSuperstates() : Set(statemachines::AbstractState) {
	return if self.eContainer().eContainer().oclIsKindOf(statemachines::AbstractState)
		then self.eContainer().eContainer().oclAsType(statemachines::AbstractState).getSuperstates()->union(self->asSet())
		else self->asSet()
		endif;
}

/*
 * Returns true if transition is local to source state i.e.
 * source state is ANY and target state is a substate of source's statemachine or
 * source state is abstract state and target state is its substate.
 */
query statemachines::Transition::isLocalToSource() : Boolean {
	return (self.source.oclIsTypeOf(statemachines::ANY) and self.source.eContainer().oclAsType(statemachines::AbstractStatemachine).contains(self.target)) or
		(self.source.oclIsKindOf(statemachines::AbstractState) and self.source.oclAsType(statemachines::AbstractState).statemachines->exists(contains(self.target)));
}

/*
 * Returns true if transition is local to target state i.e.
 * target state is ANY and source state is a substate of target's statemachine or
 * target state is abstract state and source state is its substate.
 */
query statemachines::Transition::isLocalToTarget() : Boolean {
	return (self.target.oclIsTypeOf(statemachines::ANY) and self.target.eContainer().oclAsType(statemachines::AbstractStatemachine).contains(self.source)) or
		(self.target.oclIsKindOf(statemachines::AbstractState) and self.target.oclAsType(statemachines::AbstractState).statemachines->exists(contains(self.source)));
}

/*
 * Returns true if transition is local i.e. local to source state or local to target state.
 */
query statemachines::Transition::isLocal() : Boolean {
	return self.isLocalToSource() or self.isLocalToTarget();
}

/*
 * Returns true if abstract satemachine contains a node amongst its states or substates.
 */
query statemachines::AbstractStatemachine::contains(in node : statemachines::AbstractNode) : Boolean {
	return self.nodes->includes(node) or self.nodes[statemachines::AbstractState].statemachines->exists(contains(node));
}

/*
 * Returns first initial state found in statemachine i.e. abstract state that is linked by incoming transition from 'Initial' state.
 */
helper statemachines::AbstractStatemachine::getInitialState() : statemachines::AbstractState {
	return if not self.nodes[statemachines::Initial]->isEmpty()
		then self.nodes![statemachines::Initial].outgoing->first().target.oclAsType(statemachines::AbstractState)
		else null
		endif;
}

/*
 * Returns extension id of abstract statemachine if it's an abstract extension.
 */
helper statemachines::AbstractStatemachine::getExtensionID() : String {
	return if self.oclIsKindOf(eventb::AbstractExtension)
		then self.oclAsType(eventb::AbstractExtension).extensionId
		else null
		endif;
}

/*
 * Returns all abstract states that are superstates of input state up to container statemachine.
 */
helper statemachines::AbstractState::getSuperstatesTo(in container : statemachines::AbstractStatemachine) : Set(statemachines::AbstractState) {
	return if self.eContainer() = container
		then self->asSet()
		else if self.eContainer().eContainer().oclIsKindOf(statemachines::AbstractState)
			then self.eContainer().eContainer().oclAsType(statemachines::AbstractState).getSuperstatesTo(container)->union(self->asSet())
			else self->asSet()
			endif
		endif;
}

/*
 * Returns the name of an abstract statemachine.
 */
helper statemachines::AbstractStatemachine::getName() : String {
	return if (self.oclIsTypeOf(statemachines::Statemachine)) 
	then self.oclAsType(statemachines::Statemachine).name 
	else self.oclAsType(statemachines::RefinedStatemachine).label endif;
}

/*
 * Returns true if event and its extensions contain a guard of specified label.
 */
query eventb::machine::Event::containsGuard(in label : String) : Boolean {
	return self.guards->exists(name = label) or
		(self.extended and self._refines->first().containsGuard(label));
}

/*
 * Returns true if event and its extensions contain an action of specified label.
 */
query eventb::machine::Event::containsAction(in label : String) : Boolean {
	return self.actions->exists(name = label) or
		(self.extended and self._refines->first().containsAction(label));
}

/*
 * Returns true if statemachine contains nested state, which is target for event (transition's elaborated).
 */
helper statemachines::AbstractStatemachine::containsEventTarget(in event : eventb::machine::Event) : Boolean {
	return self.nodes[statemachines::AbstractState].incoming->exists(elaborates->includes(event))
		or self.nodes[statemachines::AbstractState].statemachines->exists(containsEventTarget(event));
}

/*
 * Returns true if statemachine contains nested state, which is source for event (transition's elaborated).
 */
helper statemachines::AbstractStatemachine::containsEventSource(in event : eventb::machine::Event) : Boolean {
	return self.nodes[statemachines::AbstractState].outgoing->exists(elaborates->includes(event))
		or self.nodes[statemachines::AbstractState].statemachines->exists(containsEventSource(event));
}
