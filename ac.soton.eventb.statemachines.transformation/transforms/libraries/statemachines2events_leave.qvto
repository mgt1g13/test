import util;

modeltype eventb uses core('http://emf.eventb.org/models/core/2014');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/2014');

library statemachines2events_leave;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Superstate actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms superstate to leave actions.
 * Generates leave action for state itself and leave actions for its statemachines,
 * excluding those which contain a source state of some another transition elaborating same event 
 * (so leave actions will be generated for those from their own transition).
 */
mapping statemachines::State::vars_superState2leaveActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.map vars_state2leaveAction(event, generatorID)->asBag()->
			union(self.statemachines->reject(containsEventSource(event)).map vars_statemachine2leaveActions(event, generatorID)->flatten()->asBag());
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nested state actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to leave actions.
 * Generates leave actions for all states of statemachine.
 */
mapping statemachines::Statemachine::vars_statemachine2leaveActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.nodes[statemachines::State].map vars_state2leaveActions(event, generatorID)->asBag();
	}
}

/*
 * Transforms state to leave actions.
 * Generates leave action for state
 * as well as leave actions for its statemachines.
 */
mapping statemachines::State::vars_state2leaveActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.map vars_state2leaveAction(event, generatorID)->asBag()->
			union(self.statemachines.map vars_statemachine2leaveActions(event, generatorID)->flatten()->asBag());
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Leave action
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms state to leave action.
 * Generates leave action for source state and particular event.
 * Skips transformation if enter action on the same state exists
 * or if event is extended and contains leave action on the same state already.
 */
mapping statemachines::State::vars_state2leaveAction(in event : eventb::machine::Event, in generatorID : String) : eventb::machine::Action 
	when { not event.containsAction(ENTER_ + self.name) 
		and not event.containsAction(LEAVE_ + self.name) }
{
	name := LEAVE_ + self.name;
	if (self.getRootStatemachine().instances = null) then {
		action := self.name+B_BEQ+B_FALSE;
	}else{
		action := self.name+B_BEQ+self.name+B_SETMINUS+self.getRootStatemachine().selfName.asSet();
	}endif;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

