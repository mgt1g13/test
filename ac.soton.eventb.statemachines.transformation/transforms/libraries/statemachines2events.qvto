import util;
import libraries.statemachines2events_enter;
import libraries.statemachines2events_leave;

modeltype eventb uses core('http://emf.eventb.org/models/core/2014');
modeltype coreextension uses coreextension('http://soton.ac.uk/models/eventb/coreextension/2014');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/2014');

library statemachines2events;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Event guards and actions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms root statemachine to events.
 * Augments events with guards and actions.
 * First generates guards and enter actions, then leave actions (to be able to track enter actions and avoid multiple action generation on same variable).
 */
mapping statemachines::Statemachine::rootStatemachine2events(in generatorID : String) {
	self.map statemachine2events(generatorID);
	self.map statemachine2eventsLeave(generatorID);
}

/*
 * Transforms statemachine to events.
 * Augments events with guards and enter actions generated from transitions.
 */
mapping statemachines::Statemachine::statemachine2events(in generatorID : String) {
	self.transitions.map transition2events(generatorID);
	self.nodes[statemachines::State].statemachines.map statemachine2events(generatorID);
}

/*
 * Transforms transition to event with guards and enter actions.
 * Generates guards and enter actions for events elaborated by transition.
 * Skips initialisation event.
 */
mapping statemachines::Transition::transition2events(in generatorID : String) {
	self.elaborates[name <> INIT].map event2statemachinesEvent(self, generatorID);
}

/*
 * Transforms event to same event augmented with guard and enter actions.
 * Generates guard and enter actions from transition and adds to event.
 * Skips mapping of enter actions for self-loop transitions.
 */
mapping inout eventb::machine::Event::event2statemachinesEvent(in transition : statemachines::Transition, in generatorID : String) {

	self.parameters := 
		transition.target.getRootStatemachine()[transition.target.getRootStatemachine().instances!=null].map rootStatemachine2parameter(self, generatorID)->
		union(transition.parameters.map transitionParameter2parameter(self, generatorID)->asOrderedSet())->
		union(self.parameters);

	self.witnesses := 
		transition.witnesses.map transitionWitness2witness(self, generatorID)->asOrderedSet()->
		union(self.witnesses);

	self.guards := 
		transition.map transition2sourceGuards(self, generatorID) -> //transition.source[statemachines::State].map sourceState2sourceGuard(self, generatorID)->
		union(transition.map initialTransition2sourceGuard(self, generatorID)->asOrderedSet())->
		union(transition.parameters.map transitionParameter2guard(self, generatorID)->asOrderedSet())->
		union(transition.guards.map transitionGuard2guard(self, generatorID)->asOrderedSet())->
		union(self.guards);

	self.actions := 
		transition.map transition2enterActions(self, generatorID)->
		//transition[source<>target].target[statemachines::State].map targetState2enterActions(self, transition, generatorID)->
		union(transition.actions.map transitionAction2action(self, generatorID)->asOrderedSet())->
		union(self.actions);
}

/*
 * Generates source guards for the transition as the collection,
 * if source is of type STATE, that state is occupied,
 * else, if source is of type Fork, take the union of the actions generated by recursively calling this rule for each incoming transition to the fork
 * else, if source is of type Junction, generate one guard for the junction using rule junction2sourceGuard
 */

mapping statemachines::Transition::transition2sourceGuards(inout event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Guard) {
	init {
		result := self[source<>target].source[statemachines::State].map sourceState2sourceGuard(event, generatorID) ->
					union(self[source<>target].source[statemachines::Fork].incoming.map transition2sourceGuards(event, generatorID)->asOrderedSet()) ->
					union(self[source<>target and source.oclIsKindOf(statemachines::Junction)].map junction2disjunctiveSourceGuard(event, generatorID)->asOrderedSet());
	}
}

/*
 * Generates a single disjunctive guard representing the condition for an outgoing transition from a junction to be enabled.
 * Any upstream junctions or forks are considered in the forming of the predicate.
 */

mapping statemachines::Transition::junction2disjunctiveSourceGuard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
	when{self.source.oclIsKindOf(statemachines::Junction)} 
	{
		var nm : String = "";
		var pred : String = "";
		self.source.incoming[source<>target and source.oclIsKindOf(statemachines::State)].map guardedTransition2conjunctiveSourceGuard(event, generatorID)->asBag() ->
		union(self.source.incoming[source<>target and source.oclIsKindOf(statemachines::Junction)].map junction2disjunctiveSourceGuard(event, generatorID)->asBag()) ->
		union(self.source.incoming[source<>target and source.oclIsKindOf(statemachines::Fork)].map fork2conjunctiveSourceGuard(event, generatorID)->asBag()) ->
		forEach(gs){
			if (nm="") then {nm := gs.name} else {nm := nm + "_or_" + gs.name} endif;
			if (pred="") then {pred := gs.predicate} else {pred := pred + B_OR + gs.predicate} endif;
		};
		name := nm;
		predicate := self.addTransitionGuards("("+pred+")");	
		generated := true;
		attributes += getGeneratedAttr(generatorID);	
}

/*
 * Generates a single conjunctive guard representing the condition for a Join (fork) to be enabled.
 * N.B. this should only be used when the outgoing leads to a downstream junction which means that the conjunctive guard will be used as a clause in a disjunction.
 * When a downstream junction is not involved the fork should be handled by generating multiple seperate guards.
 */

mapping statemachines::Transition::fork2conjunctiveSourceGuard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
	when{self.source.oclIsKindOf(statemachines::Fork)} {
		var nm : String = "";
		var pred : String = "";
		self.source.incoming[source<>target and source.oclIsKindOf(statemachines::State)].map guardedTransition2conjunctiveSourceGuard(event, generatorID) -> forEach(gs){
			if (nm="") then {nm := gs.name} else {nm := nm + "_and_" + gs.name} endif;
			if (pred="") then {pred := gs.predicate} else {pred := pred + B_AND + gs.predicate} endif;
		};
		name := nm;
		//predicate := "("+self.addTransitionGuards(pred)+")";	
		predicate := self.addTransitionGuards(pred);
		generated := true;
		attributes += getGeneratedAttr(generatorID);	
}

/*
 * Generates enter state actions for the transition as the collection
 * if target is of type STATE, enter that state,
 * else, if target is of type FORK, take the union of the actions generated by recursively calling this rule for each outgoing transition from the fork
 */

mapping statemachines::Transition::transition2enterActions(inout event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self[source<>target].target[statemachines::State].map targetState2enterActions(event, self, generatorID) ->
					union(self[source<>target].target[statemachines::Fork].outgoing.map transition2enterActions(event, generatorID)->asOrderedSet());
	}
}

//
// Parameters
//

mapping coreextension::TypedParameter::transitionParameter2parameter(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Parameter
 {
 	name := self.name;
 	comment := self.comment;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }
 
mapping statemachines::Statemachine::rootStatemachine2parameter(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Parameter
 when{ self.isRootStatemachine() and not(event.containsParameterWithName(self.selfName)) }
 {
 	name := self.selfName;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }
 
 //
 // Witnesses
 //
 
 mapping eventb::machine::Witness::transitionWitness2witness(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Witness
 {
 	name := self.name;
 	predicate := self.predicate;
 	comment := self.comment;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }
 
 //
 // Guards
 //
 
 mapping coreextension::TypedParameter::transitionParameter2guard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
 {
 	name := self.name+"_type";
 	predicate := self.name+B_IN+self.type;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }
 
  mapping eventb::machine::Guard::transitionGuard2guard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
 {
 	name := self.name;
 	predicate := self.predicate;
 	theorem := self.theorem;
 	comment := self.comment;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Source guard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms guarded transition from source state to a conjunctive source guard representing the transition source and transition guards.
 * Skips transformation if event contains source guard on the same state already.
 * NOTE - THIS RULE SHOULD ONLY BE USED TO GENERATE A SUB-CLAUSE IN A DISJUNCTION (E.G. WHEN THERE IS A DOWNSTREAM JUNCTION).
 *  NORMALLY TRANSITION GUARDS ARE JUST ADDED TO THE EVENT'S GUARD COLLECTION
 */

 mapping statemachines::Transition::guardedTransition2conjunctiveSourceGuard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
 when{self.source.oclIsTypeOf(statemachines::State) and 
 		not( 
 			event.containsGuardWithPrefix(ISIN_ + self.source.oclAsType(statemachines::State).name) 
 			or 
 			event.containsGuardWithSuffix(ISIN_ + self.source.oclAsType(statemachines::State).name)) }
 {
		name := ISIN_ + self.source.oclAsType(statemachines::State).name;
		predicate := self.addTransitionGuards(self.source.oclAsType(statemachines::State).getSourceStatePredicate());
		generated := true;
		attributes += getGeneratedAttr(generatorID);
}

/*
 * Adds to the given predicate, by conjunction, the predicates from the guards of the
 * contextual transition segment, which does not target a real state.  
 * NOTE - THIS RULE SHOULD ONLY BE USED TO GENERATE A SUB-CLAUSE IN A DISJUNCTION (E.G. WHEN THERE IS A DOWNSTREAM JUNCTION).
 *  NORMALLY TRANSITION GUARDS ARE JUST ADDED TO THE EVENT'S GUARD COLLECTION
 */
helper statemachines::Transition::addTransitionGuards(in predicate : String) : String 
{
	var p : String = predicate;
	if not self.target.oclIsKindOf(statemachines::State) and not self.guards->isEmpty() then {
		self.guards->forEach(g){
			p := p+B_AND+g.predicate;
		};
		p := "("+p+")"; }
	endif;
	return p;
}

/*
 * Transforms source state to source guard.
 * Generates guard for source state and particular event.
 * Skips transformation if event contains source guard on the same state already.
 */

mapping statemachines::State::sourceState2sourceGuard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
 when{ not( event.containsGuardWithPrefix(ISIN_ + self.name) or event.containsGuardWithSuffix(ISIN_ + self.name)) }
 {
	name := ISIN_ + self.name;
	predicate := self.getSourceStatePredicate();
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

/*
 * Returns a predicate string representing the guard for the transition source state
 * this is either state = TRUE of self : state depending on lifting
 */
helper statemachines::State::getSourceStatePredicate() : String {
	return 
			if self.getRootStatemachine().instances = null then
				self.name + B_EQ + B_TRUE
			else 
				self.getRootStatemachine().selfName+B_IN+self.name
			endif;
}

/*
 * Only for transitions from the root initial state when the root statemachine has a final state
 * Transforms initial transition to guard that the statemachine is not active.
 * Generates guard for source state and particular event.
 * Skips transformation if event contains source guard on the same state already.
 */

mapping statemachines::Transition::initialTransition2sourceGuard(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Guard
 when{ self.source.oclIsKindOf(statemachines::Initial) and
 		self.source.getStatemachine().isRootStatemachine() and
 		self.source.getStatemachine().hasFinalState() and
 		not(event.containsGuardWithPrefix(ISNOTIN_ + self.source.getStatemachine().name) or
 			 event.containsGuardWithSuffix(ISNOTIN_ + self.source.getStatemachine().name)) }
 {
		name := ISNOTIN_ + self.source.getStatemachine().name;
		predicate := self.getStateMachineNotActivePredicate();
		generated := true;
		attributes += getGeneratedAttr(generatorID);
 }

/*
 * Returns a predicate string representing the guard that the root statemachine being activiated is not already activiated
 * this is either TRUE or self /: union of states depending on lifting
 */
helper statemachines::Transition::getStateMachineNotActivePredicate() : String {
	return 
			if self.source.getRootStatemachine().instances = null then
				B_TRUE+B_NOTIN+(self.source.getStatemachine().getStateNamesAsSingletons()->toString(B_UNION)).parenthesize()
			else 
				self.source.getRootStatemachine().selfName+B_NOTIN+(self.source.getStatemachine().getStateNames()->toString(B_UNION)).parenthesize()
			endif;
}

 
 //
 // Actions
 //
 
  mapping eventb::machine::Action::transitionAction2action(inout event : eventb::machine::Event, in generatorID : String) : eventb::machine::Action
 {
 	name := self.name;
 	action := self.action;
 	comment := self.comment;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
 }

