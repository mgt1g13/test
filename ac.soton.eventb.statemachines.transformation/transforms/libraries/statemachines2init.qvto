import util;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

library statemachines2init;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initialisation actions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms root statemachine to initialisation actions.
 * Augments initialisation event with actions.
 * Generates active state actions.
 */
mapping statemachines::Statemachine::rootStatemachine2initActions(in generatorID : String) {
	self.nodes[statemachines::Initial].outgoing.map transition2initActions(generatorID);
}

/*
 * Transforms transition to initialisation actions.
 * Generates actions for initialisation event, elaborated by transition.
 */
mapping statemachines::Transition::transition2initActions(in generatorID : String) {
	self.elaborates[name = INIT].map initEvent2initEventActiveStates(self, generatorID);
}

/*
 * Transforms event to same event augmented with initialisation actions on active states.
 * Generates initialisation actions from transition and adds to event.
 */
mapping inout eventb::machine::Event::initEvent2initEventActiveStates(in transition : statemachines::Transition, in generatorID : String) {
	self.actions := transition.target[statemachines::State].map targetState2initActionsActive(self, generatorID)->
		union(self.actions);
}

/*
 * Transfroms active target state to initialisation actions.
 * Generates actions for all the superstates of target state,
 * as well as actions for target state's statemachines.
 */
mapping statemachines::State::targetState2initActionsActive(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.getSuperstates()[statemachines::State].map superState2initActionsActive(event, generatorID)->
			union(self.map state2initActionsActive(event, self, generatorID)->asBag());
	}
}

/*
 * Transforms state to initialisation action.
 * Generates action for state and event.
 * Skips transformation if event is extended and contains same action already.
 */
mapping statemachines::State::state2initAction(in event : eventb::machine::Event, in value : String, in generatorID : String) : eventb::machine::Action
	when { not event.containsAction(INIT_ + self.name) }
{
	name := INIT_ + self.name;
	action := self.name + B_BEQ + value;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Superstate actions (active)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms superstate to initialisation actions.
 * Generates action for state itself and for its statemachines,
 * excluding those which contain a target state of a transition of the same event (so actions will be generated for those from their own transition).
 */
mapping statemachines::State::superState2initActionsActive(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		var value : String = "";
		if (self.getRootStatemachine().instances = null) then {
			value := B_TRUE;
		}else{
			value := self.getRootStatemachine().instances.name;
		}endif;	
		result := self.map state2initAction(event, value, generatorID)->asBag()->
			union(self.statemachines->reject(containsEventTarget(event)).map statemachine2initActionsActive(event, generatorID)->flatten()->asBag());
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nested state actions (active)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms active state to initialisation actions.
 * Generates action for abstract state
 * as well as all its statemachines, excluding those containing target state directly linked by transition, so that intermediate statemachines don't need to be initialised.
 */
mapping statemachines::State::state2initActionsActive(in event : eventb::machine::Event, in target : statemachines::State, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		var value : String = "";
		if (self.getRootStatemachine().instances = null) then {
			value := B_TRUE;
		}else{
			value := self.getRootStatemachine().instances.name;
		}endif;	
		result := self.map state2initAction(event, value, generatorID)->asBag()->
			union(self.statemachines[not contains(target)].map statemachine2initActionsActive(event, generatorID)->flatten()->asBag());
	}
}

/*
 * Transforms active statemachine to initialisation actions.
 * Finds initial state in statemachine (state, linked by transition with Initial state)
 * and generates initialisation actions for all superstates of found initial state,
 * as well as actions for initial state itself and its statemachines.
 */
mapping statemachines::Statemachine::statemachine2initActionsActive(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		var target : statemachines::State := self.getStartingState();
		result := target.getSuperstatesTo(self).map state2initActionsActive(event, target, generatorID)->flatten()->asBag()->
			union(target.map state2initActionsActive(event, target, generatorID));
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Inactive state actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms event to same event augmented with initialisation actions on inactive states.
 * Generates initialisation actions on inactive states and adds to initialisation event.
 */
mapping inout eventb::machine::Event::initEvent2initEventInactiveStates(in statemachine : statemachines::Statemachine, in generatorID : String) {
	self.actions := statemachine.map statemachine2initActionsInactive(self, generatorID)->
		union(self.actions);
}

/*
 * Transforms statemachine to initialisation actions on inactive states.
 */
mapping statemachines::Statemachine::statemachine2initActionsInactive(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.nodes[statemachines::State].map state2initActionsInactive(event, generatorID)->flatten()->asBag();
	}
}

/*
 * Transforms state to initialisation actions on inactive states.
 * Generates action for state and all its statemachines.
 */
mapping statemachines::State::state2initActionsInactive(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		var value : String = "";
		if (self.getRootStatemachine().instances = null) then {
			value := B_FALSE;
		}else{
			value := B_EMPTYSET;
		}endif;	
		result := self.map state2initAction(event, value, generatorID)->
			union(self.statemachines.map statemachine2initActionsInactive(event, generatorID)->flatten()->asBag());
	}
}