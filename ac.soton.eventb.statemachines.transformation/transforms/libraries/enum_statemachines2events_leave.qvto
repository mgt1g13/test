import util;

modeltype eventb uses core('http://emf.eventb.org/models/core/2014');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/2014');

library set_statemachines2events_leave;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Superstate actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms superstate to leave actions.
 * Generates leave actions for its statemachines,
 * excluding those which contain a source state of some another transition elaborating same event 
 * (so leave actions will be generated for those from their own transition).
 */
mapping statemachines::State::enum_superState2leaveActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.statemachines.map enum_statemachine2leaveActions(event, generatorID)->flatten()->asBag();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nested state actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to leave actions.
 * Generates leave actions for all states of statemachine.
 */
mapping statemachines::Statemachine::enum_statemachine2leaveActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.map enum_statemachine2leaveAction(event, generatorID)->asBag()->
			union(self.nodes[statemachines::State].statemachines.map enum_statemachine2leaveActions(event, generatorID)->flatten()->asBag());
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Leave action
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to leave action.
 * Generates leave action for a statemachine and a particular event.
 * Skips transformation if enter action on the same statemachine exists
 * or if event is extended and contains leave action on the same statemachine already.
 */
mapping statemachines::Statemachine::enum_statemachine2leaveAction(in event : eventb::machine::Event, in generatorID : String) : eventb::machine::Action 
	when { not event.containsActionWithPrefix(ENTER_ + self.name) 
		and not event.containsActionWithPrefix(LEAVE_ + self.name) }
{
	name := LEAVE_ + self.name;
	action :=
		if self.getRootStatemachine().instances = null then
			self.name + B_BEQ + self.name + _NULL
		else
			self.name+(self.getRootStatemachine().selfName).parenthesize()+B_BEQ+self.name+_NULL
		endif;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

