import util;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

library cleanup;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Cleanup mappings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms machine to machine free from generated elements.
 */
mapping inout eventb::machine::Machine::machine2nonGeneratedMachine(in generatorID : String) {
	variables := variables->reject(isGenerated(generatorID));
	invariants := invariants->reject(isGenerated(generatorID));
	events.map event2nonGeneratedEvent(generatorID);
}

/*
 * Transforms event to event free from generated elements.
 */
mapping inout eventb::machine::Event::event2nonGeneratedEvent(in generatorID : String) {
	parameters := parameters->reject(isGenerated(generatorID));
	guards := guards->reject(isGenerated(generatorID));
	actions := actions->reject(isGenerated(generatorID));
}

/*
 * Transforms context to context free from generated elements.
 */
mapping inout eventb::context::Context::context2nonGeneratedContext(in generatorID : String) {
	constants := constants->reject(isGenerated(generatorID));
	sets := sets->reject(isGenerated(generatorID));
	axioms := axioms->reject(isGenerated(generatorID));
}