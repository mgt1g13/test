import util;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines');

library set_statemachines2events_enter;
property RootStatemachine : Statemachine = null;
property refinmentLevel : Integer = 0;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Enter action
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms state to enter action.
 */
mapping statemachines::State::targetState2enterActions(in event : eventb::machine::Event, in transition : statemachines::Transition, in generatorID : String, in refLevel : Integer, in RootSM : Statemachine) : Bag(eventb::machine::Action) {
	init {
		RootStatemachine := RootSM;
		refinmentLevel := refLevel;	
		result := self.map state2enterActions(event, generatorID)->flatten()->asBag();
	}
}

mapping statemachines::State::state2enterActions(in event : eventb::machine::Event, in generatorID : String) : Bag(eventb::machine::Action) {
	init {
		result := self.map state2enterAction(event, generatorID)->asBag();
	}
}

/*
 * Sets the statemachine variable to the target state.
 */
 
mapping statemachines::State::state2enterAction(in event : eventb::machine::Event, in generatorID : String) : eventb::machine::Action 
{
	name := ENTER_ + self.getStatemachine().name + "__" + self.name;
	action := RootStatemachine.name + "_" + refinmentLevel.toString() + B_BEQ + self.name;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

