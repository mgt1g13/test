import util;

modeltype eventb uses core('http://emf.eventb.org/models/core');
modeltype statemachines uses statemachines('http://soton.ac.uk/models/eventb/statemachines/1013');

library set_statemachines2invariants;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Type invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to type invariants.
 */
mapping statemachines::Statemachine::statemachine2typeInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.map statemachine2typeInvariant(generatorID)->asSequence()->
			union(self.nodes[statemachines::State].statemachines.map statemachine2typeInvariants(generatorID));
	}
}

/*
 * Transforms statemachine to type invariant.
 * Creates invariant only for non-refined statemachine.
 */
mapping statemachines::Statemachine::statemachine2typeInvariant(in generatorID : String) : eventb::machine::Invariant 
	when { self._refines = null }
{
	name := TYPEOF_ + self.name;
	predicate := 
		if self.getRootStatemachine().instances = null then
			self.name+B_IN+self.name + _STATES
		else
			self.name+B_IN+self.getRootStatemachine().instances.name+B_TFUN+self.name+_STATES			
		endif;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Superstate invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to superstate invariants.
 */
mapping statemachines::Statemachine::statemachine2superstateInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.nodes[statemachines::State].map state2superstateInvariants(generatorID);
	}
}

/*
 * Transforms state to superstate invariants.
 */
mapping statemachines::State::state2superstateInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.statemachines.map statemachine2superstateInvariant(self, generatorID)->
			union(self.statemachines.map statemachine2superstateInvariants(generatorID));
	}
}

/*
 * Transforms statemachine to partition invariant.
 * Creates invariant only for non-refined statemachine.
 */
mapping statemachines::Statemachine::statemachine2superstateInvariant(in parentState : statemachines::State, in generatorID : String) : eventb::machine::Invariant
	when { self._refines = null }
{
	name := SUPERSTATEOF_ + self.name;
	predicate := 
		if self.getRootStatemachine().instances = null then
			self.name + B_NEQ + self.name + _NULL + B_EQUIV + parentState.getStatemachine().name + B_EQ + parentState.name
		else
			B_DOM+(self.name+B_RANSUB+(self.name+_NULL).asSet()).parenthesize()+B_EQ+B_DOM+(parentState.getStatemachine().name+B_RANRES+(parentState.name).asSet()).parenthesize()
		endif;
	generated := true;
	attributes += getGeneratedAttr(generatorID);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constraint invariants
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * Transforms statemachine to constraint invariants.
 */
mapping statemachines::Statemachine::statemachine2constraintInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.nodes[statemachines::State].map state2constraintInvariants(generatorID);
	}
}

/*
 * Transforms state to constraint invariants.
 */
mapping statemachines::State::state2constraintInvariants(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		result := self.map state2constraintInvariantsFinal(generatorID)->asSequence()->
			union(self.statemachines.nodes[statemachines::State].map state2constraintInvariants(generatorID)->flatten());
	}
}

/*
 * Transforms state to constraint invariants.
 */
mapping statemachines::State::state2constraintInvariantsFinal(in generatorID : String) : Sequence(eventb::machine::Invariant) {
	init {
		var statemachine : statemachines::Statemachine := self.getStatemachine();
		result := self.invariants->collect(i | object eventb::machine::Invariant {
			name := i.name;
			theorem := i.theorem;
			predicate :=
				if self.getRootStatemachine().instances = null then
					 (statemachine.name + B_EQ + self.name).parenthesize() + B_IMPL + i.predicate.parenthesize()
				else
					B_FORALL+self.getRootStatemachine().selfName+B_MIDDOT+
					(self.getStatemachine().name+(self.getRootStatemachine().selfName).parenthesize()+B_EQ+self.name).parenthesize() + B_IMPL + i.predicate.parenthesize()
				endif;
			generated := true;
			attributes += getGeneratedAttr(generatorID);
		});
	}
}