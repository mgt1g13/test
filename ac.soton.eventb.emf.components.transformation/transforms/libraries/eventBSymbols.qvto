

library eventBSymbols;



property B_BOOL : String = "BOOL";
property B_TRUE : String = "TRUE";
property B_FALSE : String = "FALSE";

property B_LPAR : String = "(";
property B_RPAR : String = ")";
property B_LBRC : String = "{";
property B_RBRC : String = "}";
property B_COM : String = ", ";

property B_RSUB : String = "\u2a65";            // |>> Range subtraction - symbol 2, Category.Relations;
property B_RRST : String = "\u25b7";            // |> Range restriction - symbol 5, Category.Relations;
property B_UNION : String = "\u222a";            // \\/ Union - symbol 8, Category.Sets; 

property B_INTER : String = "\u2229";            // /\\ Intersection - symbol 11, Category.Sets;
/*
property B_|-> : String = "\u21a6";            //symbol 14, Category.Sets; 
property B_--> : String = "\u2192";            //symbol 17, Category.Relations;
property B_/<<: : String = "\u2284";            //symbol 20, Category.Sets;
property B_/<: : String = "\u2288";            //symbol 23, Category.Sets;
 */
property B_NIN : String = "\u2209";            // /: not element of - symbol 26, Category.Sets;
/*
property B_<=> : String = "\u21d4";            //symbol 29, Category.Other;
property B_=> : String = "\u21d2";            //symbol 32, Category.Other; 
*/
property B_LAND : String = "\u2227";            // _& logical and - symbol 35, Category.Other; 
/*
¤property B_! : String = "\u2200";            //symbol 38, Category.Other;
property B_# : String = "\u2203";            //symbol 41, Category.Other;
*/
property B_EQ : String = "=";					// = equals
property B_NEQ : String = "\u2260";            // /= not equal - symbol 44, Category.Comparison;
property B_LEQ : String = "\u2264";            // <= less or equal - symbol 47, Category.Comparison;
property B_GEQ : String = "\u2265";            // >= greater or equal - symbol 50, Category.Comparison;

property B_SSUB: String = "\u2282";            // << strict subset - symbol 53, Category.Sets;
property B_SUB : String = "\u2286";            // <: subset - symbol 56, Category.Sets;
/* 
property B_<<->> : String = "\ue102";            //symbol 59, Category.Relations;
property B_<<-> : String = "\ue100";            //symbol 62, Category.Relations;
property B_<->> : String = "\ue101";            //symbol 65, Category.Relations;
property B_<-> : String = "\u2194";            //symbol 68, Category.Relations;
property B_>->> : String = "\u2916";            //symbol 71, Category.Relations;
*/
property B_PFUN : String = "\u21f8";            // +-> partial function - symbol 74, Category.Relations;
/*
property B_>+> : String = "\u2914";            //symbol 77, Category.Relations;
property B_>-> : String = "\u21a3";            //symbol 80, Category.Relations;
property B_+>> : String = "\u2900";            //symbol 83, Category.Relations;
property B_->> : String = "\u21a0";            //symbol 86, Category.Relations;
*/
property B_EMPTY : String = "\u2205";            // {} Empty set -symbol 89, Category.Sets; 
property B_SSTN : String = "\u2216";            // \ set subtraction - symbol 92, Category.Sets;
/*
property B_** : String = "\u00d7";            //symbol 95, Category.Sets;
property B_<+ : String = "\ue103";            //symbol 98, Category.Relations;
property B_>< : String = "\u2297";            //symbol 101, Category.Relations;
property B_|| : String = "\u2225";            //symbol 104, Category.Relations;
property B_~ : String = "\u223c";            //symbol 107, Category.Relations;
property B_<<| : String = "\u2a64";            //symbol 110, Category.Relations;
property B_<| : String = "\u25c1";            //symbol 113, Category.Relations;
property B_% : String = "\u03bb";            //symbol 116, Category.Other; 
property B_.. : String = "\u2025";            //symbol 119, Category.Other;
property B_. : String = "\u00b7";            //symbol 122, Category.Other; 
property B_+ : String = "\u002b";            //symbol 125, Category.Other; 
property B_- : String = "\u2212";            //symbol 128, Category.Other; 
property B_^ : String = "\u005e";            //symbol 131, Category.Other;
property B_* : String = "\u2217";            //symbol 134, Category.Other;
property B_/ : String = "\u00f7";            //symbol 137, Category.Other; 
*/
property B_BEQ : String = "\u2254";            	// := Becomes Equal - symbol 140, Category.Assignment;
property B_BEO : String = "\u2208";            	// :: Becomes element of - symbol 143, Category.Assignment;
property B_BST : String = "\u2223";           	// :| Becomes such that - symbol 146, Category.Assignment;
property B_IN : String = "\u2208";            	// : symbol 149, Category.Sets; 
property B_ST : String = "\u2223";           	// | symbol 152, Category.Other; 
property B_MAPLET : String = "\u21a6";         	// |-> symbol 155, Category.Sets; 

property B_NAT1 : String = "\u2115\u0031";  	// NAT1 NAT1 -symbol 158, Category.Sets;
property B_NAT : String = "\u2115";       		// NAT NAT - symbol 161, Category.Sets;
property B_POW1 : String = "\u2119\u0031"; 		//symbol 164, Category.Sets;
property B_POW : String = "\u2119"; 			//symbol 167, Category.Sets; 
property B_INT : String = "\u2124"; 			//symbol 170, Category.Sets; 
property B_GENINTER : String = "\u22c2";     	// INTER General intersection - symbol 173, Category.Sets;
property B_GENUNION : String = "\u22c3";    	// UNION General union - symbol 176, Category.Sets;
property B_LOR : String = "\u2228";        		// or Logical or - symbol 179, Category.Other; 
property B_LNOT : String = "\u00ac";            // not Logical not - symbol 182, Category.Other; 
property B_LTRUE : String = "\u22a4";			// true true predicate - symbol 185, Category.Other;
property B_LFALSE : String = "\u22a5";			// false  false predicate - symbol 188, Category.Other;
property B_CIRC : String = "\u2218";            // circ backward composition - symbol 191, Category.Relations;
property B_OFTYPE : String = "\u2982";    		// oftype Of type - symbol 194, Category.Other; 

/* symbol descriptions
symbol_101=Direct product
symbol_104=Parallel product
symbol_107=Tilde operator
symbol_11=Intersection
symbol_110=Domain subtraction
symbol_113=Domain restriction
symbol_116=Lambda
symbol_119='Upto' operator
symbol_122=Middle dot
symbol_125=Plus
symbol_128=Minus
symbol_131=Exponentiation
symbol_134=Asterisk operator
symbol_137=Division
symbol_14=Maplet
symbol_140=Becomes equal
symbol_143=Becomes element of
symbol_146=Becomes such that
symbol_149=Element of
symbol_152=Such that
symbol_155=Maplet
symbol_158=Positive numbers
symbol_161=Natural numbers
symbol_164=Non-empty powerset
symbol_167=Powerset
symbol_17=Total function
symbol_170=Integers
symbol_173=General intersection
symbol_176=General union
symbol_179=Logical or
symbol_182=Not
symbol_185='True' predicate
symbol_188='False' predicate
symbol_191=Backward composition
symbol_194=Of type
symbol_2=Range subtraction
symbol_20=Not strict subset
symbol_23=Not subset
symbol_26=Not element of
symbol_29=Equivalence
symbol_32=Implication
symbol_35=Logical and
symbol_38='For all' predicate
symbol_41='There exists' predicate
symbol_44=Not equal
symbol_47=Less or equal
symbol_5=Range restriction
symbol_50=Greater or equal
symbol_53=Strict subset
symbol_56=Subset
symbol_59=Total surjective relation
symbol_62=Total relation
symbol_65=Surjective relation
symbol_68=Relation
symbol_71=Bijection
symbol_74=Partial function
symbol_77=Partial injection
symbol_8=Union
symbol_80=Total injection
symbol_83=Partial surjection
symbol_86=Total surjection
symbol_89=Empty set
symbol_92=Set minus/substraction
symbol_95=Cartesian product
symbol_98=Relational overriding
*/