#################################################################################
# Copyright (c) 2012  Southampton.
# All rights reserved. 
#
#################################################################################

property B_BOOL : String = "BOOL";
property B_TRUE : String = "TRUE";
property B_FALSE : String = "FALSE";

property B_LPAR : String = "(";
property B_RPAR : String = ")";
property B_LBRC : String = "{";
property B_RBRC : String = "}";
property B_COM : String = ", ";

property B_RSUB : String = "\u2a65";            // |>> Range subtraction - symbol 2, Category.Relations;
property B_RRST : String = "\u25b7";            // |> Range restriction - symbol 5, Category.Relations;
property B_UNION : String = "\u222a";            // \\/ Union - symbol 8, Category.Sets; 

property B_INTER : String = "\u2229";            // /\\ Intersection - symbol 11, Category.Sets;

property B_|-> : String = "\u21a6";            //symbol 14, Category.Sets; 
property B_--> : String = "\u2192";            //symbol 17, Category.Relations;
property B_/<<: : String = "\u2284";            //symbol 20, Category.Sets;
property B_/<: : String = "\u2288";            //symbol 23, Category.Sets;

property B_NIN : String = "\u2209";            // /: not element of - symbol 26, Category.Sets;

property B_<=> : String = "\u21d4";            //symbol 29, Category.Other;
property B_=> : String = "\u21d2";            //symbol 32, Category.Other; 

property B_LAND : String = "\u2227";            // _& logical and - symbol 35, Category.Other; 

§property B_! : String = "\u2200";            //symbol 38, Category.Other;
property B_# : String = "\u2203";            //symbol 41, Category.Other;

property B_EQ : String = "=";					// = equals
property B_NEQ : String = "\u2260";            // /= not equal - symbol 44, Category.Comparison;
property B_LEQ : String = "\u2264";            // <= less or equal - symbol 47, Category.Comparison;
property B_GEQ : String = "\u2265";            // >= greater or equal - symbol 50, Category.Comparison;

property B_SSUB: String = "\u2282";            // << strict subset - symbol 53, Category.Sets;
property B_SUB : String = "\u2286";            // <: subset - symbol 56, Category.Sets;

property B_<<->> : String = "\ue102";            //symbol 59, Category.Relations;
property B_<<-> : String = "\ue100";            //symbol 62, Category.Relations;
property B_<->> : String = "\ue101";            //symbol 65, Category.Relations;
property B_<-> : String = "\u2194";            //symbol 68, Category.Relations;
property B_>->> : String = "\u2916";            //symbol 71, Category.Relations;

property B_PFUN : String = "\u21f8";            // +-> partial function - symbol 74, Category.Relations;

property B_>+> : String = "\u2914";            //symbol 77, Category.Relations;
property B_>-> : String = "\u21a3";            //symbol 80, Category.Relations;
property B_+>> : String = "\u2900";            //symbol 83, Category.Relations;
property B_->> : String = "\u21a0";            //symbol 86, Category.Relations;

property B_EMPTY : String = "\u2205";            // {} Empty set -symbol 89, Category.Sets; 
property B_SSTN : String = "\u2216";            // \ set subtraction - symbol 92, Category.Sets;

property B_** : String = "\u00d7";            //symbol 95, Category.Sets;
property B_<+ : String = "\ue103";            //symbol 98, Category.Relations;
property B_>< : String = "\u2297";            //symbol 101, Category.Relations;
property B_|| : String = "\u2225";            //symbol 104, Category.Relations;
property B_~ : String = "\u223c";            //symbol 107, Category.Relations;
property B_<<| : String = "\u2a64";            //symbol 110, Category.Relations;
property B_<| : String = "\u25c1";            //symbol 113, Category.Relations;
property B_% : String = "\u03bb";            //symbol 116, Category.Other; 
property B_.. : String = "\u2025";            //symbol 119, Category.Other;
property B_. : String = "\u00b7";            //symbol 122, Category.Other; 

property B_PLUS : String = "\u002b";            // + addition - symbol 125, Category.Other; 

property B_- : String = "\u2212";            //symbol 128, Category.Other; 
property B_^ : String = "\u005e";            //symbol 131, Category.Other;
property B_* : String = "\u2217";            //symbol 134, Category.Other;
property B_/ : String = "\u00f7";            //symbol 137, Category.Other; 

property B_BEQ : String = "\u2254";            	// := Becomes Equal - symbol 140, Category.Assignment;
property B_BEO : String = "\u2208";            	// :: Becomes element of - symbol 143, Category.Assignment;
property B_BST : String = "\u2223";           	// :| Becomes such that - symbol 146, Category.Assignment;
property B_IN : String = "\u2208";            	// : symbol 149, Category.Sets; 
property B_ST : String = "\u2223";           	// | symbol 152, Category.Other; 
property B_MAPLET : String = "\u21a6";         	// |-> symbol 155, Category.Sets; 

property B_NAT1 : String = "\u2115\u0031";  	// NAT1 NAT1 -symbol 158, Category.Sets;
property B_NAT : String = "\u2115";       		// NAT NAT - symbol 161, Category.Sets;
property B_POW1 : String = "\u2119\u0031"; 		//symbol 164, Category.Sets;
property B_POW : String = "\u2119"; 			//symbol 167, Category.Sets;
property B_INT : String = "\u2124"; 			//symbol 170, Category.Sets;
property B_GENINTER : String = "\u22c2";     	// INTER General intersection - symbol 173, Category.Sets;
property B_GENUNION : String = "\u22c3";    	// UNION General union - symbol 176, Category.Sets;
property B_LOR : String = "\u2228";        		// or Logical or - symbol 179, Category.Other; 
property B_LNOT : String = "\u00ac";            // not Logical not - symbol 182, Category.Other; 
property B_LTRUE : String = "\u22a4";			// true true predicate - symbol 185, Category.Other;
property B_LFALSE : String = "\u22a5";			// false  false predicate - symbol 188, Category.Other;
property B_CIRC : String = "\u2218";            // circ backward composition - symbol 191, Category.Relations;
property B_OFTYPE : String = "\u2982";    		// oftype Of type - symbol 194, Category.Other; 
 
property B_POW : String = " " 
 
#################Context##########################
# properties for creating an associated context
CTXT_NAME = {0}Ctx_{1}

#################Machine#############################
#relation types
#>->>
REL_TOTAL_BIJECTION=\u2916
#->>				
REL_TOTAL_SURJECTION=\u21a0
#>->										
REL_TOTAL_INJECTION=\u21a3
#-->				
REL_TOTAL_FUNCTION=\u2192
#+>>				
REL_PARTIAL_SURJECTION=\u2900
#>+>			
REL_PARTIAL_INJECTION=\u2914
#+->				
REL_PARTIAL_FUNCTION=\u21f8
#<<->>						
REL_TOTAL_SURJECTIVE_REL=\ue102
#<<->		
REL_TOTAL_RELATION=\ue100
#<->>						
REL_PARTIAL_SURJECTIVE_RELATION=\ue101
#<->	
REL_PARTIAL_RELATION=\u2194


#properties for creating 
CLASS_SUPERTYPE_NAME={0}.type
CLASS_SUPERTYPE_PRED={0} \u2208 \u2119 ( {1} )
CLASS_INSTANCE_NAME={0}.inst
CLASS_INSTANCE={0} {1}
CLASS_INITIALIZATION_NAME={0}.init
CLASS_INITIALIZATION_EXPR={0} \u2254 \u2205
CLASS_SUPERTYPE_UNION={0} \u2229 {1}
DYNAMIC_CLASS_VALUE={0} = \u2205

ASSOCIATION_PRED_NAME={0}.invariant
ASSOCIATION_PRED_INJECTIVE_NAME={0}.invariant.injective
ASSOCIATION_PRED={0} \u2208 {1} {2} {3}
ASSOCIATION_INJECTIVE_PRED= {0}\u223C \u2208 {1}\u21F8{2}
# properties for creating connector variables




